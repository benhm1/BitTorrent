#include <stdlib.h>
#include <stdio.h>
#include <string.h>


char * percentEncode( char * original ) {

  // Calculate the length of the percent encoded string
  int newLen = 0;
  char * ptr = original;

  while ( *ptr != '\0' ) {

    switch ( *ptr ) {
    case '!' :
    case '#' :
    case '$' :
    case '%' :
    case '&' :
    case '\'' :
    case '(' :
    case ')' :
    case '*' :
    case '+' :
    case ',' :
    case '/' :
    case ':' :
    case ';' :
    case '=' :
    case '?' :
    case '@' :
    case '[' :
    case ']' :
      newLen += 3;
      break;
    default :
      newLen += 1;

    }
    ptr ++;
  }

  char * percentEncoded = malloc( (newLen + 1) * sizeof( char ) );
  if ( ! percentEncoded ) {
    perror("malloc");
  }

  *percentEncoded = '\0';
  ptr = original;
  char * newStringPtr = percentEncoded;

  while ( *ptr != '\0' ) {

    switch ( *ptr ) {
    case '!' :
      strncat( newStringPtr, "%21", 3 );
      newStringPtr += 3;
      break;
    case '#' :
      strncat( newStringPtr, "%23", 3 );
      newStringPtr += 3;
      break;
    case '$' :
      strncat( newStringPtr, "%24", 3 );
      newStringPtr += 3;
      break;
    case '%' :
      strncat( newStringPtr, "%25", 3 );
      newStringPtr += 3;
      break;
    case '&' :
      strncat( newStringPtr, "%26", 3 );
      newStringPtr += 3;
      break;
    case '\'' :
      strncat( newStringPtr, "%27", 3 );
      newStringPtr += 3;
      break;
    case '(' :
      strncat( newStringPtr, "%28", 3 );
      newStringPtr += 3;
      break;
    case ')' :
      strncat( newStringPtr, "%29", 3 );
      newStringPtr += 3;
      break;
    case '*' :
      strncat( newStringPtr, "%2A", 3 );
      newStringPtr += 3;
      break;
    case '+' :
      strncat( newStringPtr, "%2B", 3 );
      newStringPtr += 3;
      break;
    case ',' :
      strncat( newStringPtr, "%2C", 3 );
      newStringPtr += 3;
      break;
    case '/' :
      strncat( newStringPtr, "%2F", 3 );
      newStringPtr += 3;
      break;
    case ':' :
      strncat( newStringPtr, "%3A", 3 );
      newStringPtr += 3;
      break;
    case ';' :
      strncat( newStringPtr, "%3B", 3 );
      newStringPtr += 3;
      break;
    case '=' :
      strncat( newStringPtr, "%3D", 3 );
      newStringPtr += 3;
      break;
    case '?' :
      strncat( newStringPtr, "%3F", 3 );
      newStringPtr += 3;
      break;
    case '@' :
      strncat( newStringPtr, "%40", 3 );
      newStringPtr += 3;
      break;
    case '[' :
      strncat( newStringPtr, "%5B", 3 );
      newStringPtr += 3;
      break;
    case ']' :
      strncat( newStringPtr, "%5D", 3 );
      newStringPtr += 3;
      break;
    default :
      strncat( newStringPtr, ptr, 1 ) ;
      newStringPtr += 1;
      break;
    }
    ptr ++;
  }

  return percentEncoded;


}

int main() {

  char * first = malloc( 1000 * sizeof(char) );
  fgets( first, 999, stdin );
  printf("    You Entered: %s\n", first);
  char * encoded = percentEncode( first );
  printf("Percent Encoded: %s\n", encoded );
  free( first );
  free( encoded ) ;

  return;

}
